<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2025/04/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/04/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>变量相当于内存中一个数据存储空间</p><h2 id="1-2-格式"><a href="#1-2-格式" class="headerlink" title="1.2 格式"></a>1.2 格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 数据值；</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">                <span class="comment">//定义一个整数类型的变量</span></span><br><span class="line">                <span class="comment">//数据类型 变量名 = 数据值;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">                System.out.println(a);<span class="comment">//16</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//定义一个小数类型的变量</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10.1</span>;</span><br><span class="line">                System.out.println(b);<span class="comment">//10.1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>变量必须先声名，后使用</li><li>变量在同一个作用域内不能重名</li></ol><h2 id="1-3-程序中-号的使用"><a href="#1-3-程序中-号的使用" class="headerlink" title="1.3 程序中+号的使用"></a>1.3 程序中+号的使用</h2><ol><li>当作用两边都是数值型时，做加法运算</li><li>当左右两边有一方为字符串，做拼接运算</li><li>运算顺序，是从左到右</li></ol><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">                System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> +<span class="number">3</span>); <span class="comment">//hello1003</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h1><p>Java 是一种强类型的编程语言，它对变量的数据类型有严格的限定，在定义变量是必须声名变量的数据类型，在为变量赋值时必须赋予与变量同一种类型的值</p><p><img src="https://pic1.imgdb.cn/item/680953bc58cb8da5c8c6c814.png" alt="img"></p><h2 id="2-1-整数类型"><a href="#2-1-整数类型" class="headerlink" title="2.1 整数类型"></a>2.1 整数类型</h2><table><thead><tr><th>数据类型</th><th>内存空间（8 位等于 1 字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8 位（1 字节）</td><td>-128~ 127</td></tr><tr><td>short</td><td>16 位（2 字节）</td><td>-32768~ 32767</td></tr><tr><td>int</td><td>32 位（4 字节）</td><td>-2147483648~ 2147483647</td></tr><tr><td>long</td><td>64 位（8 字节）</td><td>-9223372036854775808~ 9223372036854775807</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>Java 的整数类型默认为 int 类型，声名 long 类型须加上 ‘l’ 或 ‘L’</li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义byte类型的变量</span></span><br><span class="line">        <span class="comment">//数据类型 变量名 = 数据值;</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义short类型的变量</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.定义int类型的变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.定义long类型的变量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">123456789123456789L</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-浮点类型"><a href="#2-2-浮点类型" class="headerlink" title="2.2 浮点类型"></a>2.2 浮点类型</h2><p>浮点类型用来存储含有小数部分的数值</p><table><thead><tr><th>数据类型</th><th>内存空间（8 位等于 1 字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32 位（4 字节）</td><td>1.4E-45~ 3.4028235E38</td></tr><tr><td>double</td><td>64 位（8 字节）</td><td>4.9E-324~ 1.7976931348623157E308</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>浮点数在机器中存放的形式是：浮点数&#x3D;符号位+指数位+尾数位</li><li>尾数部分可能丢失，造成精度损失（小数都是近似值）</li><li>浮点数的默认类型是 double 型声名 float 型时须加上 ‘f’或‘F’</li><li>double 类型表示的浮点数比 float 类型更精确</li></ol><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">doubleDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.定义float类型的变量</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10.1F</span>;</span><br><span class="line">        System.out.println(e);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.定义double类型的变量</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">20.3</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-字符类型"><a href="#2-3-字符类型" class="headerlink" title="2.3 字符类型"></a>2.3 字符类型</h2><p>字符类型（char）用于存储单个字符，占用 16 位（两个字节）的内存空间</p><p><strong>注意：</strong></p><ol><li>字符类型要用单引号（‘ ’）括起来</li><li>Java 中，char 类型本质上是一个整数，在输出时，是 Unicode 码对应的字符</li><li>可以直接给 char 赋一个整数，然后输出是，会按照对应的 Unicode 字符输出</li><li>char 类型可以进行运算</li></ol><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharDetail</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">//在java中，char的本质是一个整数，在默认输出时，是unicode码对应的字符</span></span><br><span class="line">                <span class="comment">//要输出对应的数字，可以(int)字符</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">                System.out.println(c1); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">                <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//输出&#x27;a&#x27; 对应的 数字</span></span><br><span class="line">                System.out.println((<span class="type">int</span>)c2);</span><br><span class="line">                <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;韩&#x27;</span>;</span><br><span class="line">                System.out.println((<span class="type">int</span>)c3);<span class="comment">//38889</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">38889</span>;</span><br><span class="line">                System.out.println(c4);<span class="comment">//韩</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码.</span></span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>);<span class="comment">//107</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-转义字符"><a href="#2-4-转义字符" class="headerlink" title="2.4 转义字符"></a>2.4 转义字符</h2><table><thead><tr><th>转义字符（ASCII 码值【十进制】）</th><th>意义</th></tr></thead><tbody><tr><td>\b( 008)</td><td>退格（BS），将当前位置移到前一列</td></tr><tr><td>\f( 012)</td><td>换页（FF），将当前位置一道下页开头</td></tr><tr><td>–</td><td>–</td></tr><tr><td>\n( 010)</td><td>换行（LF），将当前位置移到下一行开头</td></tr><tr><td>\r( 013)</td><td>回车（CR），将当前位置移到本行开头</td></tr><tr><td>–</td><td>–</td></tr><tr><td>\t( 009)</td><td>水平制表（HT）（跳到次啊一个 TAB 位置）</td></tr><tr><td>( 092)</td><td>代表一个反斜字符\</td></tr><tr><td>–</td><td>–</td></tr><tr><td>‘( 039)</td><td>代表一个单引号（撤号字符）</td></tr><tr><td>“( 034)</td><td>代表一个双引号字符</td></tr><tr><td>–</td><td>–</td></tr><tr><td>?( 063)</td><td>代表一个问号</td></tr><tr><td>\0( 000)</td><td>空字符（NULL）</td></tr><tr><td>–</td><td>–</td></tr><tr><td>\ddd（三位八进制）</td><td>1 到 3 位八进制数所代表的任意字符</td></tr><tr><td>\xhh（十六进制）</td><td>十六进制所代表的任意字符</td></tr></tbody></table><h2 id="2-5-布尔类型"><a href="#2-5-布尔类型" class="headerlink" title="2.5 布尔类型"></a>2.5 布尔类型</h2><ol><li>布尔类型（boolean）数据只允许取值 true 或 false</li><li>Boolean 类型占 1 字节</li><li>Boolean 类型适用于逻辑运算，一般用于程序流程控制</li></ol><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boolean01</span> &#123; </span><br><span class="line">        <span class="comment">//编写一个main方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">//演示判断成绩是否通过的案例</span></span><br><span class="line">                <span class="comment">//定义一个布尔变量</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isPass</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span>(isPass == <span class="literal">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;考试通过，恭喜&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;考试没有通过，下次努力&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-基本数据类型转换"><a href="#2-6-基本数据类型转换" class="headerlink" title="2.6 基本数据类型转换"></a>2.6 基本数据类型转换</h2><h3 id="2-6-1-自动类型转换"><a href="#2-6-1-自动类型转换" class="headerlink" title="2.6.1 自动类型转换"></a>2.6.1 自动类型转换</h3><p>Java 程序在进行赋值或运算时，精度下的类型自动转换为精度达的数据类型</p><p><strong>数据类型按精度大小排序为：</strong></p><p><img src="https://pic1.imgdb.cn/item/680953bc58cb8da5c8c6c816.png" alt="img"></p><p><strong>注意：</strong></p><ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成精度最大的那种数据类型，然后再进行计算</li><li>（byte，short）和 char 之间不会相互自动转换</li><li>byte，short，char 可以进行计算，在计算时会转换为 int 类型</li><li>Boolean 类型不参与计算</li></ol><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动类型转换细节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConvertDetail</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">// 有多种类型的数据混合运算时，</span></span><br><span class="line">                <span class="comment">//系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line">                <span class="comment">//float d1 = n1 + 1.1;//错误 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line">                <span class="comment">//double d1 = n1 + 1.1;//对 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1F</span>;<span class="comment">//对 n1 + 1.1 =&gt; 结果类型是 float</span></span><br><span class="line">        </span><br><span class="line">                <span class="comment">//(byte, short) 和 char之间不会相互自动转换</span></span><br><span class="line">                <span class="comment">//当把具体数赋给 byte 时，(1)先判断该数是否在byte范围内，如果是就可以</span></span><br><span class="line">                <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//对  , -128-127</span></span><br><span class="line">                <span class="comment">// int n2 = 1; //n2 是int </span></span><br><span class="line">                <span class="comment">// byte b2 = n2; //错误，原因： 如果是变量赋值，判断类型</span></span><br><span class="line">                <span class="comment">// char c1 = b1; //错误， 原因 byte 不能自动转成 char</span></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">// byte，short，char  他们三者可以计算，在计算时首先转换为int类型</span></span><br><span class="line">                <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">                <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//short s2 = b2 + s1;//错, b2 + s1 =&gt; int</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> b2 + s1;<span class="comment">//对, b2 + s1 =&gt; int</span></span><br><span class="line">                <span class="comment">//byte b4 = b2 + b3; //错误: b2 + b3 =&gt; int</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//boolean 不参与转换</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//int num100 = pass;// boolean 不参与类型的自动转换</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-强制类型转换"><a href="#2-6-2-强制类型转换" class="headerlink" title="2.6.2 强制类型转换"></a>2.6.2 强制类型转换</h3><p>强制类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>，使用时要加上强制转换符 （ ），但可能造成精度降低或溢出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForceConvert</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">//演示强制类型转换</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.9</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);<span class="comment">//1, 造成精度损失</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>)n2;</span><br><span class="line">                System.out.println(<span class="string">&quot;b1=&quot;</span> + b1);<span class="comment">//造成 数据溢出</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-基本数据类型和-String-类型的转换"><a href="#2-7-基本数据类型和-String-类型的转换" class="headerlink" title="2.7 基本数据类型和 String 类型的转换"></a>2.7 基本数据类型和 String 类型的转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasic</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">//基本数据类型-&gt;String</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">                <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line">                <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//String-&gt;对应的基本数据类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">                <span class="comment">//会在OOP 讲对象和方法的时候回详细</span></span><br><span class="line">                <span class="comment">//解读 使用 基本数据类型对应的包装类，的相应方法，得到基本数据类型</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line">                <span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line">                <span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line">                <span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line">                <span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">                <span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">                System.out.println(num1);<span class="comment">//123</span></span><br><span class="line">                System.out.println(num2);<span class="comment">//123.0</span></span><br><span class="line">                System.out.println(num3);<span class="comment">//123.0</span></span><br><span class="line">                System.out.println(num4);<span class="comment">//123</span></span><br><span class="line">                System.out.println(num5);<span class="comment">//123</span></span><br><span class="line">                System.out.println(num6);<span class="comment">//123</span></span><br><span class="line">                System.out.println(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//怎么把字符串转成字符char -&gt; 含义是指 把字符串的第一个字符得到</span></span><br><span class="line">                <span class="comment">//解读  s5.charAt(0) 得到 s5字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">                System.out.println(s5.charAt(<span class="number">0</span>));</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>在将 String 类型转成 基本数据类型时， ，比如 我们可以把 “123” ， 转成一个整数，但是不能把 “hello” 转成一个整数</p><ol><li>如果格式不正确，就会抛出异常，程序就会终止</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示字符串转基本数据类型的细节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasicDetail</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">                <span class="comment">//转成int</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">                System.out.println(n1);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h1><p>数组是用来存储同一种数据类型的多个元素的容器，数组也是一种数据类型，是引用类型</p><h2 id="3-1-创建数组"><a href="#3-1-创建数组" class="headerlink" title="3.1 创建数组"></a>3.1 创建数组</h2><ol><li><strong>动态初始化</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数据名=<span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] a1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; </span><br><span class="line">数据类型[] 数据名;</span><br><span class="line">数组名=<span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"><span class="type">int</span>[] x;</span><br><span class="line">x=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><ol><li><strong>静态初始化</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span>，...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] a3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li>数组是多个相同类型数据的组合，实现对这些数据的统一管理</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</li><li>数组创建后，如果没有赋值，有默认值：int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</li><li>使用数组的步骤 1. 声明数组并开辟空间 2 给数组各个元素赋值 3 使用数组</li><li>数组的下标是从 0 开始的</li><li>数组下标必须在指定范围内使用，否则报：下标越界异常</li><li>数组属引用类型，数组型数据是对象(object)</li></ol><p><strong>案例：</strong></p><ol><li>创建一个 char 类型的 26 个元素的数组，分别 放置’A’-‘Z’。使用 for 循环访问所有元素并打印出来</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i++) &#123;</span><br><span class="line">            ch[i] = (<span class="type">char</span>) (<span class="string">&#x27;A&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i++) &#123;</span><br><span class="line">            System.out.print(ch[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>请求出一个数组 int[]的最大值 {4,-1,9, 10,23}，并得到对应的下标</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] num = &#123;<span class="number">4</span>, -<span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">23</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i] &gt; max) &#123;</span><br><span class="line">                max = num[i];</span><br><span class="line">                sub = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span> + max);</span><br><span class="line">        System.out.println(<span class="string">&quot;下标：&quot;</span> + sub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-数组赋值机制"><a href="#3-2-数组赋值机制" class="headerlink" title="3.2 数组赋值机制"></a>3.2 数组赋值机制</h2><ol><li>基本数据类型赋值，这个值就是具体的数据，而且相互不影响</li><li>数组在默认情况下是引用类型，赋的值是地址</li></ol><p>暂时无法在飞书文档外展示此内容</p><h2 id="3-3-数组拷贝"><a href="#3-3-数组拷贝" class="headerlink" title="3.3 数组拷贝"></a>3.3 数组拷贝</h2><p>将 int[] arr1 &#x3D; {10,20,30}; 拷贝到 arr2 数组, 要求数据空间是独立的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCopy</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 int[] arr1 = &#123;10,20,30&#125;; 拷贝到 arr2数组, </span></span><br><span class="line">        <span class="comment">//要求数据空间是独立的.</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个新的数组arr2,开辟新的数据空间</span></span><br><span class="line">        <span class="comment">//大小 arr1.length;</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="type">int</span>[arr<span class="number">1.l</span>ength];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历 arr1 ，把每个元素拷贝到arr2对应的元素位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr<span class="number">1.l</span>ength; i++) &#123;</span><br><span class="line">            arr2[i] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改 arr2， 不会对arr1有影响.</span></span><br><span class="line">        arr2[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出arr1 </span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;====arr1的元素====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr<span class="number">1.l</span>ength; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(arr1[i]);<span class="comment">//10,20,30</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;====arr2的元素====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr<span class="number">2.l</span>ength; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(arr2[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-数组反转"><a href="#3-4-数组反转" class="headerlink" title="3.4 数组反转"></a>3.4 数组反转</h2><p>要求：把数组的元素内容反转</p><p>arr {11,22,33,44,55,66} -&gt;{66, 55,44,33,22,11}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length; <span class="comment">//计算数组的长度</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            temp = arr[len - <span class="number">1</span> - i];<span class="comment">//保存</span></span><br><span class="line">            arr[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">            arr[i] = temp; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===翻转后数组===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);<span class="comment">//66,55,44,33,22,11</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-数组添加-扩容"><a href="#3-5-数组添加-扩容" class="headerlink" title="3.5 数组添加&#x2F;扩容"></a>3.5 数组添加&#x2F;扩容</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd02</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        要求：实现动态的给数组添加元素效果，实现对数组扩容。ArrayAdd.java</span></span><br><span class="line"><span class="comment">        1.原始数组使用静态分配 int[] arr = &#123;1,2,3&#125;</span></span><br><span class="line"><span class="comment">        2.增加的元素4，直接放在数组的最后 arr = &#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="comment">        3.用户可以通过如下方法来决定是否继续添加，添加成功，是否继续？y/n</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//初始化数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//遍历 arr 数组，依次将arr的元素拷贝到 arrNew数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                arrNew[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你要添加的元素&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">            <span class="comment">//把addNum赋给arrNew最后一个元素</span></span><br><span class="line">            arrNew[arrNew.length - <span class="number">1</span>] = addNum;</span><br><span class="line">            <span class="comment">//让 arr 指向 arrNew, </span></span><br><span class="line">            arr = arrNew;</span><br><span class="line">            <span class="comment">//输出arr 看看效果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;====arr扩容后元素情况====&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//问用户是否继续</span></span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续添加 y/n&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>( key == <span class="string">&#x27;n&#x27;</span>) &#123; <span class="comment">//如果输入n ,就结束</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;你退出了添加...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-冒泡排序"><a href="#3-6-冒泡排序" class="headerlink" title="3.6 冒泡排序"></a>3.6 冒泡排序</h2><p>冒泡排序(double sort)通过连续的比较与交换相邻元素实现排序，这个过程就像气泡从底部升到顶部一样</p><p><strong>动画演示：</strong></p><p><img src="https://pic1.imgdb.cn/item/680953bb58cb8da5c8c6c813.gif" alt="img"></p><p><strong>算法流程：</strong></p><p>设数组的长度为 (n) </p><ol><li>首先，对 (n) 个元素执行“冒泡”，<strong>将数组的最大元素交换至正确位置</strong></li><li>接下来，对剩余 (n - 1) 个元素执行“冒泡”，<strong>将第二大元素交换至正确位置</strong></li><li>以此类推，经过 (n - 1) 轮“冒泡”后，<strong>前 (n - 1) 大的元素都被交换至正确位置</strong></li><li>仅剩的一个元素必定是最小元素，无须排序，因此数组排序完成</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        <span class="comment">// 外循环：未排序区间为 [0, i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 内循环：将未排序区间 [0, i] 中的最大元素交换至该区间的最右端</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//比较相邻的两个元素</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 交换 arr[j] 与 arr[j + 1]</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出排序后数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);<span class="comment">//13 24 57 69 80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-顺序查找"><a href="#3-7-顺序查找" class="headerlink" title="3.7 顺序查找"></a>3.7 顺序查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;白眉鹰王&quot;</span>, <span class="string">&quot;金毛狮王&quot;</span>, <span class="string">&quot;紫衫龙王&quot;</span>, <span class="string">&quot;青翼蝠王&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (findName.equals(names[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你找到 &quot;</span> + findName);</span><br><span class="line">                System.out.println(<span class="string">&quot;下标为= &quot;</span> + i);</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123; <span class="comment">//没有找到</span></span><br><span class="line">            System.out.println(<span class="string">&quot;sorry ,没有找到 &quot;</span> + findName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-二维数组"><a href="#3-8-二维数组" class="headerlink" title="3.8 二维数组"></a>3.8 二维数组</h2><h3 id="3-8-1-创建二维数组"><a href="#3-8-1-创建二维数组" class="headerlink" title="3.8.1 创建二维数组"></a>3.8.1 创建二维数组</h3><ol><li><strong>动态初始化</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 数组名=<span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; </span><br><span class="line">数据类型[] 数组名;</span><br><span class="line">数组名=<span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"><span class="type">int</span>[][] x;</span><br><span class="line">x=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><p>暂时无法在飞书文档外展示此内容</p><ol><li><strong>静态初始化</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 数组名 = &#123;&#123;第<span class="number">0</span>行初始化&#125;，&#123;第<span class="number">1</span>行初始化&#125;，&#123;第<span class="number">2</span>行初始化&#125;，...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>暂时无法在飞书文档外展示此内容</p><h3 id="3-8-2-二维数组赋值机制"><a href="#3-8-2-二维数组赋值机制" class="headerlink" title="3.8.2 二维数组赋值机制"></a>3.8.2 二维数组赋值机制</h3><p>暂时无法在飞书文档外展示此内容</p><h3 id="3-8-3-杨辉三角"><a href="#3-8-3-杨辉三角" class="headerlink" title="3.8.3 杨辉三角"></a>3.8.3 杨辉三角</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YangHui</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                <span class="comment">//每行第一个元素和最后一个元素为1</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == arr[i].length - <span class="number">1</span>) &#123;</span><br><span class="line">                    arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//其他元素为上一行的两数相加</span></span><br><span class="line">                    arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历输出二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//输出空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> arr.length - <span class="number">1</span> - i; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">          <span class="number">1</span> </span><br><span class="line">         <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">       <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line">      <span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line">     <span class="number">1</span> <span class="number">5</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line">    <span class="number">1</span> <span class="number">6</span> <span class="number">15</span> <span class="number">20</span> <span class="number">15</span> <span class="number">6</span> <span class="number">1</span> </span><br><span class="line">   <span class="number">1</span> <span class="number">7</span> <span class="number">21</span> <span class="number">35</span> <span class="number">35</span> <span class="number">21</span> <span class="number">7</span> <span class="number">1</span> </span><br><span class="line">  <span class="number">1</span> <span class="number">8</span> <span class="number">28</span> <span class="number">56</span> <span class="number">70</span> <span class="number">56</span> <span class="number">28</span> <span class="number">8</span> <span class="number">1</span> </span><br><span class="line"> <span class="number">1</span> <span class="number">9</span> <span class="number">36</span> <span class="number">84</span> <span class="number">126</span> <span class="number">126</span> <span class="number">84</span> <span class="number">36</span> <span class="number">9</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h1><h2 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h2><p>表格中的实例假设整数变量A的值为10，变量B的值为20</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加法 - 相加运算符两侧的值</td><td>A + B 等于 30</td></tr><tr><td>-</td><td>减法 - 左操作数减去右操作数</td><td>A – B 等于 -10</td></tr><tr><td>*</td><td>乘法 - 相乘操作符两侧的值</td><td>A * B等于200</td></tr><tr><td>&#x2F;</td><td>除法 - 左操作数除以右操作数</td><td>B &#x2F; A等于2</td></tr><tr><td>％</td><td>取余 - 左操作数除以右操作数的余数</td><td>B%A等于0</td></tr><tr><td>++</td><td>自增: 操作数的值增加1</td><td>B++ 或 ++B 等于 21</td></tr><tr><td>–</td><td>自减: 操作数的值减少1</td><td>B– 或 –B 等于 19</td></tr></tbody></table><p><strong>自增自减运算符</strong></p><ol><li>当++出现在变量前，会<code>先自加一</code>，在做赋值运算</li><li>当++出现在变量后，会<code>先做赋值运算</code>，再自加1</li><li>当–出现在变量前，会<code>先自减一</code>，在做赋值运算</li><li>当–出现在变量后，会<code>先做赋值运算</code>，再自减1</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//++的使用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i++;<span class="comment">//自增 等价与i=i+1;</span></span><br><span class="line">        ++i;<span class="comment">//自增 等价与i=i+1;</span></span><br><span class="line">        System.out.println(i);<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        作为表达式使用</span></span><br><span class="line"><span class="comment">        前++：++i先只增后赋值</span></span><br><span class="line"><span class="comment">        后++；i++先赋值后自增</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++a;</span><br><span class="line">        System.out.println(b);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j++;</span><br><span class="line">        System.out.println(k);<span class="comment">//8</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        i = i++;</span><br><span class="line">        <span class="comment">//规则使用临时变量:</span></span><br><span class="line">        <span class="comment">//temp=i;</span></span><br><span class="line">        <span class="comment">//i=i+1;</span></span><br><span class="line">        <span class="comment">//i=temp</span></span><br><span class="line">        System.out.println(i);<span class="comment">//1</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">                 i=++i; </span><br><span class="line">        <span class="comment">//规则使用临时变量: </span></span><br><span class="line">        <span class="comment">// i=i+1;</span></span><br><span class="line">        <span class="comment">//temp=i;</span></span><br><span class="line">        <span class="comment">//i=temp;</span></span><br><span class="line">                 System.out.println(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-关系运算符"><a href="#4-2-关系运算符" class="headerlink" title="4.2 关系运算符"></a>4.2 关系运算符</h2><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr></tbody></table><p><em><strong>注意</strong></em>：所有的关系运算符的运算结果都是布尔类型，<code>不是true就是false</code>，不可能是其他值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b) );<span class="comment">//F</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b) );<span class="comment">//T</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );<span class="comment">//F</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );<span class="comment">//T</span></span><br><span class="line">     System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );<span class="comment">//T</span></span><br><span class="line">     System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );<span class="comment">//F</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-逻辑运算符"><a href="#4-3-逻辑运算符" class="headerlink" title="4.3 逻辑运算符"></a>4.3 逻辑运算符</h2><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">逻辑与（并且）</td><td align="left">当两边都为true，结果为true,否则为false</td></tr><tr><td align="left">|</td><td align="left">逻辑或（或者）</td><td align="left">有一边是true，结果为true，否则为false</td></tr><tr><td align="left">^</td><td align="left">逻辑异或</td><td align="left">当两边的不同时，结果为true，否则为false</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">短路与（并且）</td><td align="left">当两边都为true，结果为true,否则为false</td></tr><tr><td align="left">||</td><td align="left">短路或（或者）</td><td align="left">有一边是true，结果为true，否则为false</td></tr><tr><td align="left">!</td><td align="left">逻辑非（取反）</td><td align="left">false取反就是true，true取反就是false&#x3D;</td></tr></tbody></table><p><strong>注意</strong></p><ol><li>使用短路与 &amp;&amp; 的时候，当左边的表达式为<code>false</code>的时候，右边的表达式不执行</li><li>使用短路或 || 的时候当左边的表达式结果是<code>true</code>的时候，右边的表达式不执行</li><li>逻辑运算符两边要求都是布尔类型，并且最终的运算结果也是布尔类型</li></ol><h2 id="4-4-赋值运算符"><a href="#4-4-赋值运算符" class="headerlink" title="4.4 赋值运算符"></a>4.4 赋值运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">赋值</td></tr><tr><td align="left">+&#x3D;</td><td align="left">加等（原先的基础上加上这个数）</td></tr><tr><td align="left">-&#x3D;</td><td align="left">减等（原先的基础上减上这个数）</td></tr><tr><td align="left">*&#x3D;</td><td align="left">乘等（原先的基础上乘上这个数）</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">除等（原先的基础上除上这个数）</td></tr><tr><td align="left">%&#x3D;</td><td align="left">模等（原先的基础上模上这个数）</td></tr></tbody></table><p>使用<code>扩展赋值运算符</code>的时候，永远都<code>不会改变</code>运算结果类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">n1 += <span class="number">4</span>;<span class="comment">// n1 = n1 + 4;</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 14</span></span><br><span class="line">n1 /= <span class="number">3</span>;<span class="comment">// n1 = n1 / 3;//4</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复合赋值运算符会进行类型转换</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br></pre></td></tr></table></figure><h2 id="4-5-三元运算符"><a href="#4-5-三元运算符" class="headerlink" title="4.5 三元运算符"></a>4.5 三元运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">条件表达式 ？表达式<span class="number">1</span> ：表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算规则：</p><ol><li>如果条件表达式为true，运算后的结果是表达式1</li><li>如果条件表达式为false，运算后的结果是表达式2</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：求两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="comment">//三元运算符的最终结果一定要被使用。</span></span><br><span class="line">        <span class="comment">//要么赋值给一个变量，要么直接输出。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>  a &gt; b ? a : b ;</span><br><span class="line">        System.out.println(max);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; b ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-运算符的优先级"><a href="#4-6-运算符的优先级" class="headerlink" title="4.6 运算符的优先级"></a>4.6 运算符的优先级</h2><p>括号级别最高，逗号级别最低，单目 &gt; 算术 &gt; 位移 &gt; 关系 &gt; 逻辑 &gt; 三目 &gt; 赋值</p><table><thead><tr><th align="left">优先级</th><th align="left">运算符</th><th align="left">结合性</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">( )　[ ] 　.</td><td align="left">从左到右</td></tr><tr><td align="left">2</td><td align="left">! 　~　 ++　 –</td><td align="left">从右到左</td></tr><tr><td align="left">3</td><td align="left">*　 &#x2F;　 %</td><td align="left">从左到右</td></tr><tr><td align="left">4</td><td align="left">+　 -</td><td align="left">从左到右</td></tr><tr><td align="left">5</td><td align="left">&lt;&lt; 　&gt;&gt;　 &gt;&gt;&gt;</td><td align="left">从左到右</td></tr><tr><td align="left">6</td><td align="left">&lt; 　&lt;&#x3D;　 &gt; 　&gt;&#x3D;　 instanceof</td><td align="left">从左到右</td></tr><tr><td align="left">7</td><td align="left">&#x3D;&#x3D; 　!&#x3D;</td><td align="left">从左到右</td></tr><tr><td align="left">8</td><td align="left">&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">9</td><td align="left">^</td><td align="left">从左到右</td></tr><tr><td align="left">10</td><td align="left">&#96;</td><td align="left">&#96;</td></tr><tr><td align="left">11</td><td align="left">&amp;&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">12</td><td align="left">&#96;</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">? :</td><td align="left">从左到右</td></tr><tr><td align="left">14</td><td align="left">&#x3D; 　+&#x3D; 　-&#x3D; 　*&#x3D;　 &#x2F;&#x3D;　 %&#x3D;　 &amp;&#x3D;　 &#96;</td><td align="left">&#x3D;&#96;　 ^&#x3D;　 ~&#x3D; 　&lt;&lt;&#x3D; 　&gt;&gt;&#x3D;　 &gt;&gt;&gt;&#x3D;</td></tr><tr><td align="left">15</td><td align="left">，</td><td align="left">从右到左</td></tr></tbody></table><h2 id="4-7-标识符"><a href="#4-7-标识符" class="headerlink" title="4.7 标识符"></a>4.7 标识符</h2><ol><li>Java对各种变量，方法和类等命名时使用的字符序列称为标识符</li><li>凡是自己可以起名字的地方都叫标识符</li></ol><p><strong>标识符的命名规则：</strong></p><ol><li>由26个英文字母大小写0-9，下划线_ 或$组成</li><li>数字不可以开头</li><li>不可以使用关键字和保留字，但能包含关键字和保留字</li><li>Java中严格区分大小写，长度无限制</li><li>标识符不能包含空格</li></ol><p><strong>标识符的命名规范:</strong></p><ol><li>包名：多单词组成时所有字母都小写</li><li>类名，接口名：多单词组成时，所有单词都首字母大写</li><li>变量名，方法名：多单词组成时，第一个单词首字母小写，第二单词开始每个单词首字母大写</li><li>常量名：所有字母都大写，多单词时每个单词用下划线连接</li></ol><h2 id="4-8-关键字和保留字"><a href="#4-8-关键字和保留字" class="headerlink" title="4.8 关键字和保留字"></a>4.8 关键字和保留字</h2><p><strong>关键字：</strong></p><p>Java 语言目前定义了 51 个关键字，这些关键字不能作为变量名、类名和方法名来使用</p><table><thead><tr><th align="left">关键字</th><th></th></tr></thead><tbody><tr><td align="left">数据类型</td><td>boolean、int、long、short、byte、float、double、char、class、interface、enum、void</td></tr><tr><td align="left">流程控制</td><td>if、else、do、while、for、switch、case、default、break、continue、return</td></tr><tr><td align="left">异常处理</td><td>try、catch、finally、throw、throws</td></tr><tr><td align="left">修饰符</td><td>public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native</td></tr><tr><td align="left">类与类之间关系</td><td>extends、implements</td></tr><tr><td align="left">建立实例及引用实例</td><td>this、supper、instanceof、new</td></tr><tr><td align="left">导包</td><td>package、impor</td></tr></tbody></table><p><strong>保留字：</strong></p><p>保留字：Java版本尚未使用，但以后版本可能会作为关键字使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span>、const、byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 <span class="keyword">var</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>Java中true、false、friendly和null不属于关键字，也不是保留字，它们只是显式常量值，但是你在程序中不能使用它们作为标识符</li><li>Jxxxava关键字和保留字都是小写。即null是关键字，NULL不是关键字；TRUE、FALSE也不是关键字</li></ul><h2 id="4-9-进制"><a href="#4-9-进制" class="headerlink" title="4.9 进制"></a>4.9 进制</h2><p><strong>介绍</strong></p><ol><li>二进制：0,1，满2进1，以0b或0B开头</li><li>十进制：0-9，满10进1</li><li>八进制：0-7，满8进1，以数字0开头</li><li>十六进制：0-9以及A(10)~F(15),满16进1，以0x开头</li></ol><p><strong>N进制转十进制</strong></p><ol><li>二进制转十进制</li></ol><p><img src="https://pic1.imgdb.cn/item/680953bc58cb8da5c8c6c815.png" alt="img"></p><ol><li>八进制换十进制</li></ol><p><img src="https://pic1.imgdb.cn/item/680953bd58cb8da5c8c6c817.png" alt="img"></p><ol><li>十六进制转十进制</li></ol><p><img src="https://pic1.imgdb.cn/item/680953bd58cb8da5c8c6c818.png" alt="img"></p><p><strong>十进制转n进制</strong></p><ol><li>十进制转二进制</li><li>规则：将该数不断除以 2，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制</li><li>十进制转八进制</li><li>规则：将该数不断除以 8，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的八进制</li><li>十进制转十六进制 规则：将该数不断除以 16，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的十六进制</li></ol><p><strong>n进制转n进制</strong></p><ol><li>二进制转八进制</li><li>规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。 案例：请将 ob11010101 转成八进制 ob11(3)010(2)101(5) &#x3D;&gt; 0325</li><li>二进制转十六进制</li><li>规则：从低位开始，将二进制数每四位一组，转成对应的十六进制数即可。 案例：请将 ob11010101 转成十六进制 ob1101(D)0101(5) &#x3D; 0xD5</li><li>八进制转二进制</li><li>规则：将八进制数每 1 位，转成对应的一个 3 位的二进制数即可。 案例：请将 0237 转成二进制 02(010)3(011)7(111) &#x3D; 0b10011111</li><li>十六进制转二进制</li><li>规则：将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可。 案例：请将 0x23B 转成二进制 0x2(0010)3(0011)B(1011) &#x3D; 0b001000111011</li></ol><h2 id="4-10-原码，反码，补码"><a href="#4-10-原码，反码，补码" class="headerlink" title="4.10 原码，反码，补码"></a>4.10 原码，反码，补码</h2><ol><li>二进制的最高位是符号位：0表示负数</li><li>正数的原码，反码，补码都一样(三码合一)</li><li>负数的反码&#x3D;它的原码符号位不变，其它位取反（ 0 -&gt; 1 ， 1 -&gt; 0 )</li><li>负数的补码&#x3D;它的反码+ 1 ，负数的反码&#x3D;负数的补码- 1</li><li>0 的反码，补码都是 0</li><li>j ava 没有无符号数，换言之， java 中的数都是有符号的</li><li>在计算机运算的时候，都是以补码的方式来运算的</li><li>当我们看运算结果的时候，要看他的原码（重点）</li></ol><h2 id="4-11位运算"><a href="#4-11位运算" class="headerlink" title="4.11位运算"></a>4.11位运算</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">如果相对应位都是1，则结果为1，否则为0</td></tr><tr><td align="left">|</td><td align="left">如果相对应位都是 0，则结果为 0，否则为 1</td></tr><tr><td align="left">^</td><td align="left">如果相对应位值相同，则结果为0，否则为1</td></tr><tr><td align="left">〜</td><td align="left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td></tr></tbody></table><ol><li><strong>&amp;按位与</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">2</span> &amp; <span class="number">3</span>);<span class="comment">//结果为2</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2的补码   00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//3的补码   00000000 00000000 00000000 00000011 </span></span><br><span class="line"><span class="comment">//&amp;运算后   00000000 00000000 00000000 00000010 </span></span><br><span class="line"><span class="comment">//结果就是  2</span></span><br></pre></td></tr></table></figure><ol><li><strong>|按位或</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">5</span> | <span class="number">3</span>);<span class="comment">//结果为7</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span></span><br><span class="line"><span class="comment">//3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span></span><br><span class="line"><span class="comment">//7按位或运算后：0000 0000 0000 0000 0000 0000 0000 0111</span></span><br></pre></td></tr></table></figure><ol><li><strong>~按位非</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(~-<span class="number">2</span>);<span class="comment">//结果为1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先得到 -2的原码  10000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// -2的 反码             11111111 11111111 11111111 11111101</span></span><br><span class="line"><span class="comment">// -2的 补码       11111111 11111111 11111111 11111110</span></span><br><span class="line"><span class="comment">//~-2操作          00000000 00000000 00000000 00000001  </span></span><br><span class="line"><span class="comment">//运算后的原码 就是 00000000 00000000 00000000 00000001 =&gt; 1</span></span><br></pre></td></tr></table></figure><ol><li>^<strong>按位异或</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">5</span> ^ <span class="number">3</span>);<span class="comment">//结果为6</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101</span></span><br><span class="line"><span class="comment">//3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011</span></span><br><span class="line"><span class="comment">//7按位或运算后：0000 0000 0000 0000 0000 0000 0000 0111</span></span><br></pre></td></tr></table></figure><ol><li><strong>&lt;&lt;左位移运算符</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0000 0000 0000 0000 0000 0000 0000 0101 左移2位，低位补0：</span></span><br><span class="line"><span class="comment">//0000 0000 0000 0000 0000 0000 0001 0100 换算成10进制为20 </span></span><br><span class="line"><span class="comment">//本质 5 * 2 * 2 = 20</span></span><br></pre></td></tr></table></figure><ol><li><strong>&gt;&gt;右位移运算符</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//运行结果是1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0000 0000 0000 0000 0000 0000 0000 0101 右移2位，高位补0</span></span><br><span class="line"><span class="comment">//0000 0000 0000 0000 0000 0000 0000 0001</span></span><br><span class="line"><span class="comment">//本质 5 /2 / 2 = 1</span></span><br></pre></td></tr></table></figure><ol><li><strong>&gt;&gt;&gt;无符号运算符</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">5</span>&gt;&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是0</span></span><br><span class="line">                System.out.println(-<span class="number">5</span>&gt;&gt;&gt;<span class="number">3</span>);<span class="comment">//结果是536870911</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101</span></span><br><span class="line"><span class="comment">//-5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5无符号右移3位后结果为0，0的二进制为： 0000 0000 0000 0000 0000 0000 0000 0000 // (用0进行补位)</span></span><br><span class="line"><span class="comment">//-5无符号右移3位后的结果 536870911 换算成二进制： 0001 1111 1111 1111 1111 1111 1111 1111 // (用0进行补位)</span></span><br></pre></td></tr></table></figure><h1 id="5-程序控制流程"><a href="#5-程序控制流程" class="headerlink" title="5.程序控制流程"></a>5.程序控制流程</h1><h2 id="5-1-顺序语句"><a href="#5-1-顺序语句" class="headerlink" title="5.1 顺序语句"></a>5.1 顺序语句</h2><p>顺序结构就是程序从上到下逐行执行，表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响</p><p>暂时无法在飞书文档外展示此内容</p><p>Java 中定义变量时采用合法的<code>前向引用</code>。如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误形式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-选择结构语句"><a href="#5-2-选择结构语句" class="headerlink" title="5.2 选择结构语句"></a>5.2 选择结构语句</h2><p>if 条件判断结构</p><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式或<span class="type">boolean</span>类型的值)｛</span><br><span class="line">          语句块;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><ol><li>首先判断条件表达式的值</li><li>如果是 true，则执行语句块</li><li>如果为 false，则不执行语句块</li></ol><p>暂时无法在飞书文档外展示此内容</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">if01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编写一个程序,可以输入人的年龄,如果该同志的年龄大于 18 岁</span></span><br><span class="line">        <span class="comment">// 则输出 &quot;你年龄大于 18,要对自己的行为负责,送入监狱&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">garde</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (garde &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你年龄大于18，要对自己的行为负责，送入监狱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="If…else-语句"><a href="#If…else-语句" class="headerlink" title="If…else 语句"></a>If…else 语句</h3><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123; </span><br><span class="line">          语句块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><ol><li>首先判断条件表达式看其结果是 true 还是 false</li><li>如果是 true 就执行语句块 1</li><li>如果是 false 就执行语句块 2</li></ol><p>暂时无法在飞书文档外展示此内容</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">if02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编写一个程序,可以输入人的年龄,如果该同志的年龄大于 18 岁,</span></span><br><span class="line">        <span class="comment">// 则输出 &quot;你年龄大于 18,要对自己的行为负责, 送入监狱&quot;</span></span><br><span class="line">        <span class="comment">// 否则 ,输出&quot;你的年龄不大这次放过你了.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (grade &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的年龄大于18，要对自己的行为负责，送入监狱&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的年龄不大这次放过你了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="If…-else-If…-else-语句"><a href="#If…-else-If…-else-语句" class="headerlink" title="If….else If….else 语句"></a>If….else If….else 语句</h3><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>说明：一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构</p><p><strong>执行流程：</strong></p><ol><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句块1，然后结束当前多分支</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句块2，然后结束当前多分支</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li></ol><p>暂时无法在飞书文档外展示此内容</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">if03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cent</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cent &gt;= <span class="number">1</span> &amp;&amp; cent &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cent == <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;信用极好&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cent &gt; <span class="number">80</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;信用优秀&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cent &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;信用一般&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;信用不及格&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="If…-else嵌套"><a href="#If…-else嵌套" class="headerlink" title="If….else嵌套"></a>If….else嵌套</h3><p>在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支，不要超过三层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>-<span class="keyword">else</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>-<span class="keyword">else</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><p>参加歌手比赛，如果初赛成绩大于 8.0 进入决赛，否则提示淘汰。并且根据性别提示进入男子组或女子组，输入成绩和性别，进行判断和输出信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nestedif</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> sc.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &gt; <span class="number">8.0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gender == <span class="string">&#x27;男&#x27;</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入决赛&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gender == <span class="string">&#x27;女&#x27;</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入决赛&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;性别有误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;淘汰&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-switch条件语句"><a href="#5-3-switch条件语句" class="headerlink" title="5.3 switch条件语句"></a>5.3 switch条件语句</h2><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                语句体<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                语句体<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">                语句体n+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><ol><li>首先计算出表达式的值</li><li>和case依次比较，表达式的值与case匹配就执行相应语句体</li><li>break是退出switch语句</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分</li></ol><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> sc.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期七&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch语句和if语句选择:</strong></p><ol><li>如果判断的具体数值不多，而且符合byte，short，interesting，char，enum，String这六种类型，建议使用switch语句</li><li>其他情况：对区间判断，对结果为Boolean类型判断，使用if，if的使用范围更广</li></ol><h2 id="5-4-循环结构语句"><a href="#5-4-循环结构语句" class="headerlink" title="5.4 循环结构语句"></a>5.4 循环结构语句</h2><h3 id="5-5-For循环"><a href="#5-5-For循环" class="headerlink" title="5.5 For循环"></a>5.5 For循环</h3><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="number">1</span>循环变量初始化:<span class="number">2</span>循环条件:<span class="number">4</span>循环变量迭代)&#123;</span><br><span class="line">        <span class="number">3</span>循环体部分；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行过程：①-②-③-④-②-③-④-②-③-④-…-②</strong></p><p>暂时无法在飞书文档外展示此内容</p><p><strong>案例:</strong></p><p>打印 1~100 之间所有是 9 的倍数的整数，统计个数 及 总和</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">9</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;个数为：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;总和：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-While循环"><a href="#5-6-While循环" class="headerlink" title="5.6 While循环"></a>5.6 While循环</h3><h3 id="5-7-Do…while循环"><a href="#5-7-Do…while循环" class="headerlink" title="5.7 Do…while循环"></a>5.7 Do…while循环</h3><h3 id="5-8-多重循环"><a href="#5-8-多重循环" class="headerlink" title="5.8 多重循环"></a>5.8 多重循环</h3><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环，其中for,while,do…while循环均可以作为外层循环和内层循环</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体，当只有内层循环的循环条件为false时才会跳出内层循环，才可结束外层循环的当次循环，开始下一次的循环</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次</li></ol><p><strong>案例：</strong></p><ol><li>九九乘法表</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulForExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//九九乘法表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; * &quot;</span> + i + <span class="string">&quot; = &quot;</span> + i * j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>×<span class="number">1</span>=<span class="number">1</span>   </span><br><span class="line"><span class="number">1</span>×<span class="number">2</span>=<span class="number">2</span>   <span class="number">2</span>×<span class="number">2</span>=<span class="number">4</span>   </span><br><span class="line"><span class="number">1</span>×<span class="number">3</span>=<span class="number">3</span>   <span class="number">2</span>×<span class="number">3</span>=<span class="number">6</span>   <span class="number">3</span>×<span class="number">3</span>=<span class="number">9</span>   </span><br><span class="line"><span class="number">1</span>×<span class="number">4</span>=<span class="number">4</span>   <span class="number">2</span>×<span class="number">4</span>=<span class="number">8</span>   <span class="number">3</span>×<span class="number">4</span>=<span class="number">12</span>  <span class="number">4</span>×<span class="number">4</span>=<span class="number">16</span>  </span><br><span class="line"><span class="number">1</span>×<span class="number">5</span>=<span class="number">5</span>   <span class="number">2</span>×<span class="number">5</span>=<span class="number">10</span>  <span class="number">3</span>×<span class="number">5</span>=<span class="number">15</span>  <span class="number">4</span>×<span class="number">5</span>=<span class="number">20</span>  <span class="number">5</span>×<span class="number">5</span>=<span class="number">25</span>  </span><br><span class="line"><span class="number">1</span>×<span class="number">6</span>=<span class="number">6</span>   <span class="number">2</span>×<span class="number">6</span>=<span class="number">12</span>  <span class="number">3</span>×<span class="number">6</span>=<span class="number">18</span>  <span class="number">4</span>×<span class="number">6</span>=<span class="number">24</span>  <span class="number">5</span>×<span class="number">6</span>=<span class="number">30</span>  <span class="number">6</span>×<span class="number">6</span>=<span class="number">36</span>  </span><br><span class="line"><span class="number">1</span>×<span class="number">7</span>=<span class="number">7</span>   <span class="number">2</span>×<span class="number">7</span>=<span class="number">14</span>  <span class="number">3</span>×<span class="number">7</span>=<span class="number">21</span>  <span class="number">4</span>×<span class="number">7</span>=<span class="number">28</span>  <span class="number">5</span>×<span class="number">7</span>=<span class="number">35</span>  <span class="number">6</span>×<span class="number">7</span>=<span class="number">42</span>  <span class="number">7</span>×<span class="number">7</span>=<span class="number">49</span>  </span><br><span class="line"><span class="number">1</span>×<span class="number">8</span>=<span class="number">8</span>   <span class="number">2</span>×<span class="number">8</span>=<span class="number">16</span>  <span class="number">3</span>×<span class="number">8</span>=<span class="number">24</span>  <span class="number">4</span>×<span class="number">8</span>=<span class="number">32</span>  <span class="number">5</span>×<span class="number">8</span>=<span class="number">40</span>  <span class="number">6</span>×<span class="number">8</span>=<span class="number">48</span>  <span class="number">7</span>×<span class="number">8</span>=<span class="number">56</span>  <span class="number">8</span>×<span class="number">8</span>=<span class="number">64</span>  </span><br><span class="line"><span class="number">1</span>×<span class="number">9</span>=<span class="number">9</span>   <span class="number">2</span>×<span class="number">9</span>=<span class="number">18</span>  <span class="number">3</span>×<span class="number">9</span>=<span class="number">27</span>  <span class="number">4</span>×<span class="number">9</span>=<span class="number">36</span>  <span class="number">5</span>×<span class="number">9</span>=<span class="number">45</span>  <span class="number">6</span>×<span class="number">9</span>=<span class="number">54</span>  <span class="number">7</span>×<span class="number">9</span>=<span class="number">63</span>  <span class="number">8</span>×<span class="number">9</span>=<span class="number">72</span>  <span class="number">9</span>×<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><ol><li>空心金字塔</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulForExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="comment">//空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= num - i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出 * 号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= (<span class="number">2</span> * i) - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//当前行的第一个位置是*,最后一个位置也是*, 最后一层全部 *</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">1</span> || j == (<span class="number">2</span> * i) - <span class="number">1</span> || i == num) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//其他情况输出空格</span></span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每打印完一层的*后，就换行</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">5</span></span><br><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><h2 id="5-9-跳转控制语句"><a href="#5-9-跳转控制语句" class="headerlink" title="5.9 跳转控制语句"></a>5.9 跳转控制语句</h2><h3 id="5-9-1-Break"><a href="#5-9-1-Break" class="headerlink" title="5.9.1 Break"></a>5.9.1 Break</h3><ul><li>break语句用于终止某个语句块的执行，一般使用在switch语句或者循环[for,while,do-while]中</li><li>break 跳出最里层的循环，并且继续执行该循环下面的语句</li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="comment">// x 等于 30 时跳出循环</span></span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="5-9-2-Continue"><a href="#5-9-2-Continue" class="headerlink" title="5.9.2 Continue"></a>5.9.2 Continue</h3><ul><li>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代</li><li>在 for 循环中，continue 语句使程序立即跳转到更新语句</li><li>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
